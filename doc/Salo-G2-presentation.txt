
Salo-G2
Работа над ошибками

Что для этого потребуется:
	Python3 - Основной процесс, слушающий аккаунты
		библиотека VK_API
		фреймворк flask https://habr.com/ru/post/326898/
		библиотека curses
	Go - для обработки приходящих сообщений. Запускается в качнстве отдельного процесса
		библиотека Redis (gomodule/redigo)
		библиотека PostgreSQL (database/sql, sqlx)
		библиотека VK
	Redis - для хранения конфигов и "краткосрочных" пользовательских данных
	MariaDB - хранение ответов и "долгосрочных" пользовательских данных

Архитектура:
	Фреймворк flask слушает ВК через CallbackAPI (в перспективе можно и другие соцсети подрубать)
	В отдельных потоках обрабатываются разные аккаунты.
	Каждый аккаунт - это отдельный бот со своими метаданными.
	В новой архитектуре нет ботов с несколькими интерфейсами, как в старом сале. Каждый интерфейс является самодостаточным. Для простоты их будем называть "боты".
	Работа каждого бота зависит от двух источников данных:
		От базы данных, которую бот использует. В MariaDB мы создаём несколько БД для ботов аналогично тому, как это было в старом Сале. При этом несколько ботов могут сидеть на одной и той же БД, это позволяет экономить память и унифицировать одни и те же базы ответов под разных ботов.
		От конфигов Redis. У каждого бота имеется свой личный redis конфиг с уникальным пространством ключей. Этого мы добиваемся при помощи shared databases в redis наподобие того, как это реализовано в mysql.
		При этом python тоже имеет доступ к redis конфигам и можно передавать через redis некоторую информацию, это тоже быстро.
	Ответы (а это большие JSON структуры) парсятся на стороне Питона, но так как для самого парсинга используется код на чистом Си, это должно происходить довольно быстро.
	При поступлении сообщений, которые адресованы именно нам, вызывается отдельный бинарник (движок), генерирующий ответ. Основной процесс (платформа) ждёт завершения его работы. Если всё плохо, то мы сбиваем процесс.
	// При старте мы запихиваем в движок основную информацию о сообщении и о боте (имя бота и сообщение в виде JSON структуры). Но при этом между платформой и движком остаётся UNIX-сокет. При необходимости движок может запросить дополнитеотные данные из соцсети для формирования правильного ответа. (Например список участников беседы, информацию о пользователе, статистику ВК, в общем всё, что можно получить через VK API)
	При старте мы передаём движку токен ВК, основную информацию о сообщении и о боте (имя бота и сообщение в виде JSON структуры) и далее контролируем только его корректное завершение. Он сам делает необходимые запросы к API VK и отправляет ответ пользователю, если это требуется.
	Параллельно с обработкой самих запросов мы должны выполнять определённые процедуры с фиксированной периодичностью. Их лучше всего организовать в виде отдельных тикеров на Python. 
	При этом тикеры могут быть двух типов:
		Специфичные для отдельно взятого бота. Эти тикеры выполняются для каждого бота (параллельно и независимо). Например тикер, удаляющий старые записи из БД, которые больше не нужны.
		Глобальные тикеры, которые не относятся к какому-то боту конкретно, но всё же нужны для поддержания чистоты и порядка, так сказать.
	Управление:
		К архитектуре управляющих команд и их обработке необходимо подойти более основательно, чем в прошлый раз.
		Как и прежде, при разговоре с ботом мы будем разделять разговорные и командные сообщения.
		Командные сообщения начинаются с / (прямого слеша). После этого идёт имя команды, пробел и аргументы, если они есть.
		Аргументы задаются аналогично, как и в старом сале:
			-<текст> - именованный аргумент
			--<текст> - именованный список
			остальное - позиционные аргументы
		Есть команды, относящиеся к отдельностоящему боту, а есть те, которые относятся к платформе целиком.
		Необходимо оставить unix сокет между основным процессом и движком для запросов.
		При этом следует по-минимуму задействовать этот канал. Если что-то можно посчитать на стороне обработчика, то лучше это сделать там.
		
Возможности:
	Возможности бота в плане общения планируется позаимствовать из старого Сала.
	Из доп. возможностей:
		Возможность работы со списком участников беседы

Salo API
	Интерфейс управления ботом будет переработан. А именно будет использован ncurses для большей наглядности.
	При этом следует оставить возможность кидать команды через сеть автоматически, к примеру используя графический интерфейс домашнего ПК. Но надо подумать, как это лучше сделать, чтобы была безопасность 80 LVL. А пока ssh ван лав.
	В любом случае, текстовый интерфейс платформы следует переработать, ибо это пиздец.
	
База данных SQL:
	answers (таблица с типовыми ответами)
		rx (приходящая фраза)
		tx (ответ)
		bot_id (id бота, который использует эти ответы или 0 - все боты)
	user, user_reserve (таблица пользователей)
		*account_id (string)
		*social_network_id (enumerate)
		fi_name
		la_name
		user_name (default: first name)
		status (enumerate)
	user_data:
		*account_id (string)
		*social_network_id (enumerate)
		data_structure (JSON)
	history, history_reserve:
		*account_id (string)
		*social_network_id (enumerate)
		rx
		tx
		time
	attachment:
		type (enumerate)
		answer (JSON)
	unsolved:
		rx
		*editor_id (string)
		*editor_network_id (enumerate)
		answer
		status (enumerate)
	
